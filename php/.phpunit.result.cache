C:37:"PHPUnit\Runner\DefaultTestResultCache":36080:{a:2:{s:7:"defects";a:314:{s:62:"HammingComparatorTest::testNoDifferenceBetweenIdenticalStrands";i:4;s:77:"HammingComparatorTest::testCompleteHammingDistanceOfForSingleNucleotideStrand";i:4;s:64:"HammingComparatorTest::testCompleteHammingDistanceForSmallStrand";i:4;s:47:"HammingComparatorTest::testSmallHammingDistance";i:4;s:61:"HammingComparatorTest::testSmallHammingDistanceInLongerStrand";i:4;s:47:"HammingComparatorTest::testLargeHammingDistance";i:4;s:58:"HammingComparatorTest::testHammingDistanceInVeryLongStrand";i:4;s:71:"HammingComparatorTest::testExceptionThrownWhenStrandsAreDifferentLength";i:4;s:20:"RaindropsTest::test3";i:3;s:20:"RaindropsTest::test5";i:3;s:20:"RaindropsTest::test7";i:3;s:20:"RaindropsTest::test6";i:3;s:20:"RaindropsTest::test9";i:3;s:21:"RaindropsTest::test10";i:3;s:21:"RaindropsTest::test14";i:3;s:21:"RaindropsTest::test15";i:3;s:21:"RaindropsTest::test21";i:3;s:21:"RaindropsTest::test25";i:3;s:21:"RaindropsTest::test35";i:3;s:21:"RaindropsTest::test49";i:3;s:22:"RaindropsTest::test105";i:3;s:20:"RaindropsTest::test1";i:3;s:21:"RaindropsTest::test52";i:3;s:24:"RaindropsTest::test12121";i:3;s:17:"RomanTest::test27";i:3;s:18:"RomanTest::test575";i:3;s:19:"RomanTest::test1024";i:3;s:19:"RomanTest::test2999";i:3;s:19:"RomanTest::test3000";i:3;s:22:"YearTest::testLeapYear";i:3;s:34:"PangramTest::testMissingCharacterX";i:4;s:41:"PangramTest::testAnotherMissingCharacterX";i:4;s:48:"PangramTest::testMissingLettersReplacedByNumbers";i:4;s:60:"PangramTest::testMissingLetterReplacedWithUpperCaseCharacter";i:4;s:41:"PangramTest::testPangramWithOnlyLowerCase";i:4;s:39:"PangramTest::testPangramWithUnderscores";i:4;s:35:"PangramTest::testPangramWithNumbers";i:4;s:51:"PangramTest::testPangramWithMixedCaseAndPunctuation";i:4;s:46:"PangramTest::testPangramWithNonAsciiCharacters";i:4;s:36:"PigLatinTest::testWordBeginningWithP";i:4;s:36:"PigLatinTest::testWordBeginningWithK";i:4;s:36:"PigLatinTest::testWordBeginningWithY";i:4;s:36:"PigLatinTest::testWordBeginningWithX";i:4;s:54:"PigLatinTest::testWordBeginningWithQWithoutAFollowingU";i:4;s:37:"PigLatinTest::testWordBeginningWithCh";i:3;s:37:"PigLatinTest::testWordBeginningWithQu";i:3;s:59:"PigLatinTest::testWordBeginningWithQuAndAPrecedingConsonant";i:3;s:37:"PigLatinTest::testWordBeginningWithTh";i:3;s:38:"PigLatinTest::testWordBeginningWithThr";i:3;s:38:"PigLatinTest::testWordBeginningWithSch";i:3;s:37:"PigLatinTest::testWordBeginningWithYt";i:3;s:37:"PigLatinTest::testWordBeginningWithXr";i:3;s:30:"PigLatinTest::testAWholePhrase";i:3;s:31:"WordCountTest::testCountOneWord";i:4;s:37:"WordCountTest::testCountOneOfEachWord";i:4;s:45:"WordCountTest::testMultipleOccurrencesOfAWord";i:4;s:36:"WordCountTest::testIgnorePunctuation";i:4;s:33:"WordCountTest::testIncludeNumbers";i:4;s:32:"WordCountTest::testNormalizeCase";i:4;s:34:"WordCountTest::testCountsMultiline";i:4;s:29:"WordCountTest::testCountsTabs";i:4;s:44:"WordCountTest::testCountsMultipleSpacesAsOne";i:4;s:58:"WordCountTest::testDoesNotCountLeadingOrTrailingWhitespace";i:4;s:26:"AnagramTest::testNoMatches";i:4;s:37:"AnagramTest::testDetectsSimpleAnagram";i:4;s:40:"AnagramTest::testDetectsMultipleAnagrams";i:4;s:44:"AnagramTest::testDoesNotDetectAnagramSubsets";i:4;s:31:"AnagramTest::testDetectsAnagram";i:4;s:41:"AnagramTest::testDetectsMultipleAnagrams2";i:4;s:44:"AnagramTest::testDoesNotDetectIdenticalWords";i:4;s:49:"AnagramTest::testDetectsAnagramsCaseInsensitively";i:4;s:59:"AnagramTest::testDetectsAnagramsUsingCaseInsensitiveSubject";i:4;s:66:"AnagramTest::testDetectsAnagramsUsingCaseInsensitvePossibleMatches";i:4;s:39:"AnagramTest::testDetectsUnicodeAnagrams";i:1;s:52:"AnagramTest::testEliminatesMisleadingUnicodeAnagrams";i:1;s:28:"TrinaryTest::test2IsDecimal2";i:4;s:29:"TrinaryTest::test10IsDecimal3";i:4;s:29:"TrinaryTest::test11IsDecimal4";i:4;s:30:"TrinaryTest::test100IsDecimal9";i:4;s:31:"TrinaryTest::test112IsDecimal14";i:4;s:31:"TrinaryTest::test222IsDecimal26";i:4;s:41:"TrinaryTest::test1122000120IsDecimal32091";i:4;s:41:"TrinaryTest::testInvalidTrinaryIsDecimal0";i:3;s:28:"TrinaryTest::test1IsDecimal1";i:4;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";i:4;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";i:4;s:30:"BinaryTest::testItParsesDigits";i:3;s:32:"BinaryTest::testItParsesHundreds";i:3;s:30:"BinaryTest::testItParsesMaxInt";i:3;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";i:4;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";i:4;s:25:"GigasecondTest::testDate1";i:4;s:25:"GigasecondTest::testDate2";i:4;s:32:"GigasecondTest::testPreUnixEpoch";i:4;s:33:"GigasecondTest::testDateWithTime1";i:4;s:33:"GigasecondTest::testDateWithTime2";i:4;s:30:"GigasecondTest::testNoMutation";i:4;s:28:"GigasecondTest::testYourself";i:1;s:29:"BobTest::testStatingSomething";i:3;s:21:"BobTest::testShouting";i:3;s:30:"BobTest::testShoutingGibberish";i:3;s:28:"BobTest::testAskingAQuestion";i:3;s:35:"BobTest::testAskingANumericQuestion";i:3;s:28:"BobTest::testAskingGibberish";i:3;s:30:"BobTest::testTalkingForcefully";i:3;s:41:"BobTest::testUsingAcronymsInRegularSpeech";i:3;s:29:"BobTest::testForcefulQuestion";i:3;s:28:"BobTest::testShoutingNumbers";i:3;s:24:"BobTest::testOnlyNumbers";i:3;s:36:"BobTest::testQuestionWithOnlyNumbers";i:3;s:42:"BobTest::testShoutingWithSpecialCharacters";i:3;s:42:"BobTest::testShoutingWithNoExclamationMark";i:3;s:44:"BobTest::testStatementContainingQuestionMark";i:3;s:35:"BobTest::testNonLettersWithQuestion";i:3;s:24:"BobTest::testPrattlingOn";i:3;s:20:"BobTest::testSilence";i:3;s:33:"BobTest::testMultipleLineQuestion";i:3;s:35:"BobTest::testStartingWithWhitespace";i:3;s:33:"BobTest::testEndingWithWhitespace";i:3;s:44:"BobTest::testNonQuestionEndingWithWhitespace";i:3;s:29:"BobTest::testProlongedSilence";i:3;s:29:"BobTest::testAlternateSilence";i:3;s:40:"LuhnValidatorTest::testSimpleValidNumber";i:4;s:36:"LuhnValidatorTest::testSpaceHandling";i:4;s:57:"LuhnValidatorTest::testValidCanadianSocialInsuranceNumber";i:3;s:43:"LuhnValidatorTest::testMultipleZerosIsValid";i:4;s:57:"LuhnValidatorTest::testThatDoublingNineIsHandledCorrectly";i:3;s:73:"LuhnValidatorTest::testNonDigitCharacterInValidStringInvalidatesTheString";i:4;s:59:"LuhnValidatorTest::testThatStringContainingSymbolsIsInvalid";i:4;s:63:"LuhnValidatorTest::testThatStringContainingPunctuationIsInvalid";i:4;s:59:"LuhnValidatorTest::testInvalidCanadianSocialInsuranceNumber";i:4;s:41:"LuhnValidatorTest::testSingleDigitInvalid";i:4;s:40:"LuhnValidatorTest::testSingleZeroInvalid";i:4;s:40:"LuhnValidatorTest::testInvalidCreditCard";i:4;s:50:"LuhnValidatorTest::testSpaceAndSingleZeroIsInvalid";i:4;s:75:"LuhnValidatorTest::testThatStringContainingSymbolsWhichCouldBeZeroIsInvalid";i:4;s:24:"IsogramTest::testIsogram";i:3;s:34:"IsogramTest::testMediumLongIsogram";i:3;s:32:"IsogramTest::testCaseInsensitive";i:3;s:34:"IsogramTest::testIsogramWithHyphen";i:3;s:39:"IsogramTest::testIgnoresMultipleHyphens";i:3;s:39:"IsogramTest::testWorksWithGermanLetters";i:3;s:30:"IsogramTest::testIgnoresSpaces";i:3;s:31:"IsogramTest::testIgnoresSpaces2";i:3;s:41:"IsogramTest::testDuplicateAccentedLetters";i:3;s:27:"IsogramTest::testNotIsogram";i:3;s:22:"RobotTest::testHasName";i:3;s:25:"RobotTest::testNameSticks";i:3;s:48:"RobotTest::testDifferentRobotsHaveDifferentNames";i:4;s:24:"RobotTest::testresetName";i:4;s:32:"RobotTest::testNameArentRecycled";i:4;s:39:"RobotTest::testNameUniquenessManyRobots";i:3;s:31:"SquaresTest::testSquareOfSumTo5";i:3;s:32:"SquaresTest::testSumOfSquaresTo5";i:3;s:35:"SquaresTest::testDifferenceOfSumTo5";i:3;s:32:"SquaresTest::testSquareOfSumTo10";i:3;s:33:"SquaresTest::testSumOfSquaresTo10";i:3;s:36:"SquaresTest::testDifferenceOfSumTo10";i:3;s:33:"SquaresTest::testSquareOfSumTo100";i:3;s:34:"SquaresTest::testSumOfSquaresTo100";i:3;s:37:"SquaresTest::testDifferenceOfSumTo100";i:3;s:31:"GradeSchoolTest::testEmptyGrade";i:4;s:31:"GradeSchoolTest::testSortSchool";i:3;s:31:"RobotSimulatorTest::testAdvance";i:3;s:36:"RobotSimulatorTest::testInstructions";i:3;s:45:"RobotSimulatorTest::testMalformedInstructions";i:3;s:44:"RobotSimulatorTest::testInstructionsChaining";i:4;s:53:"RunLengthEncodingTest::testEncodeSingleCharactersOnly";i:3;s:53:"RunLengthEncodingTest::testDecodeSingleCharactersOnly";i:3;s:39:"RunLengthEncodingTest::testEncodeSimple";i:3;s:39:"RunLengthEncodingTest::testDecodeSimple";i:4;s:49:"RunLengthEncodingTest::testEncodeWithSingleValues";i:3;s:49:"RunLengthEncodingTest::testDecodeWithSingleValues";i:3;s:64:"RunLengthEncodingTest::testDecodeMultipleWhitespaceMixedInString";i:3;s:50:"RunLengthEncodingTest::testEncodeDecodeCombination";i:3;s:44:"RunLengthEncodingTest::testEncodeEmptyString";i:4;s:61:"SeriesTest::testCanFindTheLargestProductOf2WithNumbersInOrder";i:3;s:43:"SeriesTest::testCanFindTheLargestProductOf2";i:4;s:56:"SeriesTest::testFindsTheLargestProductIfSpanEqualsLength";i:3;s:61:"SeriesTest::testCanFindTheLargestProductOf3WithNumbersInOrder";i:3;s:43:"SeriesTest::testCanFindTheLargestProductOf3";i:4;s:61:"SeriesTest::testCanFindTheLargestProductOf5WithNumbersInOrder";i:3;s:51:"SeriesTest::testCanGetTheLargestProductOfABigNumber";i:4;s:63:"SeriesTest::testCanGetTheLargestProductOfABigNumberProjectEuler";i:4;s:49:"SeriesTest::testReportsZeroIfTheOnlyDigitsAreZero";i:4;s:48:"SeriesTest::testReportsZeroIfAllSpansIncludeZero";i:4;s:49:"SeriesTest::testRejectsSpanLongerThanStringLength";i:3;s:58:"SeriesTest::testReports1ForEmptyStringAndEmptyProduct0Span";i:4;s:61:"SeriesTest::testReports1ForNonemptyStringAndEmptyProduct0Span";i:4;s:48:"SeriesTest::testRejectsEmptyStringAndNonzeroSpan";i:3;s:47:"SeriesTest::testRejectsInvalidCharacterInDigits";i:3;s:35:"SeriesTest::testRejectsNegativeSpan";i:3;s:33:"MinesweeperTest::testAnEmptyBoard";i:4;s:60:"MinesweeperTest::testAnIncompleteSideBorderThrowsAnException";i:3;s:59:"MinesweeperTest::testAnIncompleteTopBorderThrowsAnException";i:3;s:52:"MinesweeperTest::testAMissingCornerThrowsAnException";i:3;s:64:"MinesweeperTest::testABoardWithLessThan2SquaresThrowsAnException";i:3;s:37:"MinesweeperTest::testRowsOfSameLength";i:3;s:40:"MinesweeperTest::testCanOnlyContainMines";i:3;s:43:"MinesweeperTest::testBoardWithOneMineToLeft";i:3;s:44:"MinesweeperTest::testBoardWithOneMineToRight";i:3;s:48:"MinesweeperTest::testBoardWithAMineToTopAndRight";i:3;s:61:"MinesweeperTest::testBoardWithAMineToBottomAndLeftAndDiagonal";i:3;s:38:"MinesweeperTest::testAComplicatedBoard";i:3;s:22:"ChangeTest::testChange";i:4;s:42:"ChangeTest::testChangeWithLilliputianCoins";i:4;s:43:"ChangeTest::testChangeWithLowerElboniaCoins";i:4;s:36:"ChangeTest::testWithLargeTargetValue";i:4;s:55:"ChangeTest::testPossibleChangeWithoutUnitCoinsAvailable";i:4;s:62:"ChangeTest::testAnotherPossibleChangeWithoutUnitCoinsAvailable";i:4;s:30:"ChangeTest::testNoCoinsForZero";i:4;s:50:"ChangeTest::testForChangeSmallerThanAvailableCoins";i:3;s:52:"ChangeTest::testErrorIfNoCombinationCanAddUpToTarget";i:3;s:39:"ChangeTest::testChangeValueLessThanZero";i:3;s:32:"ChangeTest::testSingleCoinChange";i:4;s:36:"PhoneNumberTest::testCleansTheNumber";i:4;s:44:"PhoneNumberTest::testCleansTheNumberWithDots";i:4;s:54:"PhoneNumberTest::testCleansTheNumberWithMultipleSpaces";i:4;s:39:"PhoneNumberTest::testInvalidWhen9Digits";i:3;s:58:"PhoneNumberTest::testInvalidWhen11DigitsDoesNotStartWithA1";i:3;s:54:"PhoneNumberTest::testValidWhen11DigitsAndStartingWith1";i:4;s:73:"PhoneNumberTest::testValidWhen11DigitsAndStartingWith1EvenWithPunctuation";i:4;s:48:"PhoneNumberTest::testInvalidWhenMoreThan11Digits";i:3;s:39:"PhoneNumberTest::testInvalidWithLetters";i:3;s:43:"PhoneNumberTest::testInvalidWithPunctuation";i:3;s:49:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith0";i:3;s:49:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith1";i:3;s:53:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith0";i:3;s:53:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith1";i:3;s:69:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith0OnValid11DigitNumber";i:3;s:69:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith1OnValid11DigitNumber";i:3;s:73:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith0OnValid11DigitNumber";i:3;s:73:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith1OnValid11DigitNumber";i:3;s:25:"WordProblemTest::testAdd1";i:4;s:25:"WordProblemTest::testAdd2";i:4;s:39:"WordProblemTest::testAddNegativeNumbers";i:4;s:34:"WordProblemTest::testAddMoreDigits";i:4;s:29:"WordProblemTest::testSubtract";i:4;s:29:"WordProblemTest::testMultiply";i:4;s:27:"WordProblemTest::testDivide";i:4;s:29:"WordProblemTest::testAddTwice";i:4;s:36:"WordProblemTest::testAddThenSubtract";i:4;s:34:"WordProblemTest::testSubtractTwice";i:4;s:36:"WordProblemTest::testSubtractThenAdd";i:4;s:34:"WordProblemTest::testMultiplyTwice";i:4;s:36:"WordProblemTest::testAddThenMultiply";i:4;s:32:"WordProblemTest::testDivideTwice";i:4;s:32:"WordProblemTest::testTooAdvanced";i:3;s:31:"WordProblemTest::testIrrelevant";i:3;s:24:"ClockTest::testOnTheHour";i:3;s:26:"ClockTest::testPastTheHour";i:3;s:32:"ClockTest::testAddingAFewMinutes";i:3;s:32:"ClockTest::testAddingZeroMinutes";i:3;s:31:"ClockTest::testAddingOverAnHour";i:3;s:46:"ClockTest::testAddingMoreThanTwoHoursWithCarry";i:3;s:36:"ClockTest::testAddingMoreThanTwoDays";i:4;s:35:"ClockTest::testWrapAroundAtMidnight";i:3;s:30:"ClockTest::testSubtractMinutes";i:3;s:39:"ClockTest::testSubtractMoreThanTwoHours";i:3;s:54:"ClockTest::testSubtractMoreThanTwoHoursWithNegativeAdd";i:3;s:38:"ClockTest::testSubtractMoreThanTwoDays";i:3;s:34:"ClockTest::testWrapAroundBackwards";i:4;s:28:"ClockTest::testWrapAroundDay";i:3;s:37:"ClockTest::testWrapAroundDayBackwards";i:3;s:60:"ClockTest::testEquivalentClocksWithHourOverflowBySeveralDays";i:3;s:47:"ClockTest::testEquivalentClocksWithNegativeHour";i:3;s:56:"ClockTest::testEquivalentClocksWithNegativeHourThatWraps";i:3;s:62:"ClockTest::testEquivalentClocksWithMinuteOverflowBySeveralDays";i:3;s:57:"ClockTest::testEquivalentClocksWithNegativeMinuteOverflow";i:3;s:58:"ClockTest::testEquivalentClocksWithNegativeHoursAndMinutes";i:3;s:28:"ClockTest::testHoursRollOver";i:3;s:30:"ClockTest::testMinutesRollOver";i:3;s:38:"ClockTest::testHoursAndMinutesRollOver";i:3;s:36:"ClockTest::testNegativeHoursRollOver";i:3;s:38:"ClockTest::testNegativeMinutesRollOver";i:3;s:46:"ClockTest::testNegativeHoursAndMinutesRollOver";i:3;s:52:"TriangleTest::testEquilateralTrianglesHaveEqualSides";i:4;s:58:"TriangleTest::testLargerEquilateralTrianglesHaveEqualSides";i:4;s:59:"TriangleTest::testIsoscelesTriangleWhenLastTwoSidesAreEqual";i:4;s:64:"TriangleTest::testIsoscelesTriangleWhenFirstAndLastSidesAreEqual";i:4;s:60:"TriangleTest::testIsoscelesTriangleWhenFirstTwoSidesAreEqual";i:4;s:71:"TriangleTest::testIsoscelesTrianglesWithUnequalSideLargerThanEqualSides";i:4;s:50:"TriangleTest::testScaleneTrianglesHaveNoEqualSides";i:4;s:60:"TriangleTest::test2aEqualsBPlusCLooksLikeEquilateralButIsNot";i:4;s:63:"TriangleTest::testScaleneTrianglesHaveNoEqualSidesAtLargerScale";i:4;s:67:"TriangleTest::testScaleneTrianglesHaveNoEqualSidesInDescendingOrder";i:4;s:44:"TriangleTest::testVerySmallTrianglesAreLegal";i:4;s:47:"TriangleTest::testTrianglesWithNoSizeAreIllegal";i:4;s:64:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal";i:4;s:65:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal2";i:4;s:65:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal3";i:4;s:41:"NucleotideCountTest::testEmptyDNASequence";i:4;s:46:"NucleotideCountTest::testRepetitiveDNASequence";i:3;s:36:"NucleotideCountTest::testDNASequence";i:3;s:31:"OcrNumbersTest::testRecognizes0";i:4;s:31:"OcrNumbersTest::testRecognizes1";i:4;s:30:"OcrNumbersTest::testUnreadable";i:4;s:39:"OcrNumbersTest::testRecognizes110101100";i:4;s:27:"OcrNumbersTest::testGarbled";i:4;s:31:"OcrNumbersTest::testRecognizes2";i:4;s:31:"OcrNumbersTest::testRecognizes3";i:4;s:31:"OcrNumbersTest::testRecognizes4";i:4;s:31:"OcrNumbersTest::testRecognizes5";i:4;s:31:"OcrNumbersTest::testRecognizes6";i:4;s:31:"OcrNumbersTest::testRecognizes7";i:4;s:31:"OcrNumbersTest::testRecognizes8";i:4;s:31:"OcrNumbersTest::testRecognizes9";i:4;s:52:"OcrNumbersTest::testRecognizesStringOfDecimalNumbers";i:4;s:35:"OcrNumbersTest::testLinesWithCommas";i:4;s:43:"OcrNumbersTest::testErrorWrongNumberOfLines";i:3;s:45:"OcrNumbersTest::testErrorWrongNumberOfColumns";i:3;}s:5:"times";a:375:{s:30:"HelloWorldTest::testHelloWorld";d:0;s:62:"HammingComparatorTest::testNoDifferenceBetweenIdenticalStrands";d:0;s:77:"HammingComparatorTest::testCompleteHammingDistanceOfForSingleNucleotideStrand";d:0;s:64:"HammingComparatorTest::testCompleteHammingDistanceForSmallStrand";d:0;s:47:"HammingComparatorTest::testSmallHammingDistance";d:0;s:61:"HammingComparatorTest::testSmallHammingDistanceInLongerStrand";d:0;s:47:"HammingComparatorTest::testLargeHammingDistance";d:0;s:58:"HammingComparatorTest::testHammingDistanceInVeryLongStrand";d:0;s:71:"HammingComparatorTest::testExceptionThrownWhenStrandsAreDifferentLength";d:0;s:20:"RaindropsTest::test1";d:0;s:20:"RaindropsTest::test3";d:0;s:20:"RaindropsTest::test5";d:0;s:20:"RaindropsTest::test7";d:0;s:20:"RaindropsTest::test6";d:0;s:20:"RaindropsTest::test9";d:0;s:21:"RaindropsTest::test10";d:0;s:21:"RaindropsTest::test14";d:0;s:21:"RaindropsTest::test15";d:0;s:21:"RaindropsTest::test21";d:0;s:21:"RaindropsTest::test25";d:0;s:21:"RaindropsTest::test35";d:0;s:21:"RaindropsTest::test49";d:0;s:21:"RaindropsTest::test52";d:0;s:22:"RaindropsTest::test105";d:0;s:24:"RaindropsTest::test12121";d:0;s:16:"RomanTest::test1";d:0;s:16:"RomanTest::test2";d:0;s:16:"RomanTest::test3";d:0;s:16:"RomanTest::test4";d:0;s:16:"RomanTest::test5";d:0;s:16:"RomanTest::test6";d:0;s:16:"RomanTest::test9";d:0;s:17:"RomanTest::test27";d:0;s:17:"RomanTest::test48";d:0;s:17:"RomanTest::test49";d:0;s:17:"RomanTest::test59";d:0;s:17:"RomanTest::test93";d:0;s:18:"RomanTest::test141";d:0;s:18:"RomanTest::test163";d:0;s:18:"RomanTest::test402";d:0;s:18:"RomanTest::test575";d:0;s:18:"RomanTest::test911";d:0;s:19:"RomanTest::test1024";d:0;s:19:"RomanTest::test1998";d:0;s:19:"RomanTest::test2999";d:0;s:19:"RomanTest::test3000";d:0;s:22:"YearTest::testLeapYear";d:0;s:25:"YearTest::testNonLeapYear";d:0;s:29:"YearTest::testNonLeapEvenYear";d:0;s:21:"YearTest::testCentury";d:0;s:27:"YearTest::testFourthCentury";d:0;s:24:"YearTest::testMillennium";d:0;s:30:"PangramTest::testSentenceEmpty";d:0;s:41:"PangramTest::testPangramWithOnlyLowerCase";d:0;s:34:"PangramTest::testMissingCharacterX";d:0;s:41:"PangramTest::testAnotherMissingCharacterX";d:0;s:39:"PangramTest::testPangramWithUnderscores";d:0;s:35:"PangramTest::testPangramWithNumbers";d:0;s:48:"PangramTest::testMissingLettersReplacedByNumbers";d:0;s:51:"PangramTest::testPangramWithMixedCaseAndPunctuation";d:0;s:46:"PangramTest::testPangramWithNonAsciiCharacters";d:0;s:60:"PangramTest::testMissingLetterReplacedWithUpperCaseCharacter";d:0;s:36:"PigLatinTest::testWordBeginningWithP";d:0;s:36:"PigLatinTest::testWordBeginningWithK";d:0;s:36:"PigLatinTest::testWordBeginningWithY";d:0;s:36:"PigLatinTest::testWordBeginningWithX";d:0;s:36:"PigLatinTest::testWordBeginningWithA";d:0;s:36:"PigLatinTest::testWordBeginningWithE";d:0;s:36:"PigLatinTest::testWordBeginningWithI";d:0;s:36:"PigLatinTest::testWordBeginningWithO";d:0;s:36:"PigLatinTest::testWordBeginningWithU";d:0;s:48:"PigLatinTest::testWordBeginningVowelFollowedByQu";d:0;s:54:"PigLatinTest::testWordBeginningWithQWithoutAFollowingU";d:0;s:37:"PigLatinTest::testWordBeginningWithCh";d:0;s:37:"PigLatinTest::testWordBeginningWithQu";d:0;s:59:"PigLatinTest::testWordBeginningWithQuAndAPrecedingConsonant";d:0;s:37:"PigLatinTest::testWordBeginningWithTh";d:0;s:38:"PigLatinTest::testWordBeginningWithThr";d:0;s:38:"PigLatinTest::testWordBeginningWithSch";d:0;s:37:"PigLatinTest::testWordBeginningWithYt";d:0;s:37:"PigLatinTest::testWordBeginningWithXr";d:0;s:30:"PigLatinTest::testAWholePhrase";d:0;s:31:"WordCountTest::testCountOneWord";d:0;s:37:"WordCountTest::testCountOneOfEachWord";d:0;s:45:"WordCountTest::testMultipleOccurrencesOfAWord";d:0;s:36:"WordCountTest::testIgnorePunctuation";d:0;s:33:"WordCountTest::testIncludeNumbers";d:0;s:32:"WordCountTest::testNormalizeCase";d:0;s:34:"WordCountTest::testCountsMultiline";d:0;s:29:"WordCountTest::testCountsTabs";d:0;s:44:"WordCountTest::testCountsMultipleSpacesAsOne";d:0;s:58:"WordCountTest::testDoesNotCountLeadingOrTrailingWhitespace";d:0;s:26:"AnagramTest::testNoMatches";d:0;s:37:"AnagramTest::testDetectsSimpleAnagram";d:0;s:44:"AnagramTest::testDoesNotDetectFalsePositives";d:0;s:40:"AnagramTest::testDetectsMultipleAnagrams";d:0;s:44:"AnagramTest::testDoesNotDetectAnagramSubsets";d:0;s:31:"AnagramTest::testDetectsAnagram";d:0;s:41:"AnagramTest::testDetectsMultipleAnagrams2";d:0;s:44:"AnagramTest::testDoesNotDetectIdenticalWords";d:0;s:62:"AnagramTest::testDoesNotDetectNonAnagramsWithIdenticalChecksum";d:0;s:49:"AnagramTest::testDetectsAnagramsCaseInsensitively";d:0;s:59:"AnagramTest::testDetectsAnagramsUsingCaseInsensitiveSubject";d:0;s:66:"AnagramTest::testDetectsAnagramsUsingCaseInsensitvePossibleMatches";d:0;s:50:"AnagramTest::testDoesNotDetectAWordAsItsOwnAnagram";d:0;s:65:"AnagramTest::testDoesNotDetectAAnagramIfTheOriginalWordIsRepeated";d:0;s:53:"AnagramTest::testAnagramsMustUseAllLettersExactlyOnce";d:0;s:54:"AnagramTest::testEliminatesAnagramsWithTheSameChecksum";d:0;s:39:"AnagramTest::testDetectsUnicodeAnagrams";d:0;s:52:"AnagramTest::testEliminatesMisleadingUnicodeAnagrams";d:0;s:43:"AnagramTest::testCapitalWordIsNotOwnAnagram";d:0;s:54:"AnagramTest::testAnagramsMustUseAllLettersExactlyOnce2";d:0;s:28:"TrinaryTest::test1IsDecimal1";d:0;s:28:"TrinaryTest::test2IsDecimal2";d:0;s:29:"TrinaryTest::test10IsDecimal3";d:0;s:29:"TrinaryTest::test11IsDecimal4";d:0;s:30:"TrinaryTest::test100IsDecimal9";d:0;s:31:"TrinaryTest::test112IsDecimal14";d:0;s:31:"TrinaryTest::test222IsDecimal26";d:0;s:41:"TrinaryTest::test1122000120IsDecimal32091";d:0;s:41:"TrinaryTest::testInvalidTrinaryIsDecimal0";d:0;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";d:0;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";d:0;s:30:"BinaryTest::testItParsesDigits";d:0;s:32:"BinaryTest::testItParsesHundreds";d:0;s:30:"BinaryTest::testItParsesMaxInt";d:0;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";d:0;s:25:"GigasecondTest::testDate1";d:0.002;s:25:"GigasecondTest::testDate2";d:0;s:32:"GigasecondTest::testPreUnixEpoch";d:0;s:33:"GigasecondTest::testDateWithTime1";d:0;s:33:"GigasecondTest::testDateWithTime2";d:0;s:30:"GigasecondTest::testNoMutation";d:0;s:28:"GigasecondTest::testYourself";d:0;s:29:"BobTest::testStatingSomething";d:0;s:21:"BobTest::testShouting";d:0;s:30:"BobTest::testShoutingGibberish";d:0;s:28:"BobTest::testAskingAQuestion";d:0;s:35:"BobTest::testAskingANumericQuestion";d:0;s:28:"BobTest::testAskingGibberish";d:0;s:30:"BobTest::testTalkingForcefully";d:0;s:41:"BobTest::testUsingAcronymsInRegularSpeech";d:0;s:29:"BobTest::testForcefulQuestion";d:0;s:28:"BobTest::testShoutingNumbers";d:0;s:24:"BobTest::testOnlyNumbers";d:0;s:36:"BobTest::testQuestionWithOnlyNumbers";d:0;s:42:"BobTest::testShoutingWithSpecialCharacters";d:0;s:42:"BobTest::testShoutingWithNoExclamationMark";d:0;s:44:"BobTest::testStatementContainingQuestionMark";d:0;s:35:"BobTest::testNonLettersWithQuestion";d:0;s:24:"BobTest::testPrattlingOn";d:0;s:20:"BobTest::testSilence";d:0;s:29:"BobTest::testProlongedSilence";d:0;s:29:"BobTest::testAlternateSilence";d:0;s:33:"BobTest::testMultipleLineQuestion";d:0;s:35:"BobTest::testStartingWithWhitespace";d:0;s:33:"BobTest::testEndingWithWhitespace";d:0;s:44:"BobTest::testNonQuestionEndingWithWhitespace";d:0;s:48:"ComplementTest::testTranscribesGuanineToCytosine";d:0;s:48:"ComplementTest::testTranscribesCytosineToGuanine";d:0;s:47:"ComplementTest::testTranscribesThymineToAdenine";d:0;s:46:"ComplementTest::testTranscribesAdenineToUracil";d:0;s:47:"ComplementTest::testTranscribesAllOccurencesOne";d:0;s:41:"LuhnValidatorTest::testSingleDigitInvalid";d:0;s:40:"LuhnValidatorTest::testSingleZeroInvalid";d:0;s:40:"LuhnValidatorTest::testSimpleValidNumber";d:0;s:36:"LuhnValidatorTest::testSpaceHandling";d:0;s:57:"LuhnValidatorTest::testValidCanadianSocialInsuranceNumber";d:0;s:59:"LuhnValidatorTest::testInvalidCanadianSocialInsuranceNumber";d:0;s:40:"LuhnValidatorTest::testInvalidCreditCard";d:0;s:73:"LuhnValidatorTest::testNonDigitCharacterInValidStringInvalidatesTheString";d:0;s:59:"LuhnValidatorTest::testThatStringContainingSymbolsIsInvalid";d:0;s:63:"LuhnValidatorTest::testThatStringContainingPunctuationIsInvalid";d:0;s:50:"LuhnValidatorTest::testSpaceAndSingleZeroIsInvalid";d:0;s:43:"LuhnValidatorTest::testMultipleZerosIsValid";d:0;s:57:"LuhnValidatorTest::testThatDoublingNineIsHandledCorrectly";d:0;s:75:"LuhnValidatorTest::testThatStringContainingSymbolsWhichCouldBeZeroIsInvalid";d:0;s:24:"IsogramTest::testIsogram";d:0;s:27:"IsogramTest::testNotIsogram";d:0;s:34:"IsogramTest::testMediumLongIsogram";d:0;s:32:"IsogramTest::testCaseInsensitive";d:0;s:34:"IsogramTest::testIsogramWithHyphen";d:0;s:39:"IsogramTest::testIgnoresMultipleHyphens";d:0;s:39:"IsogramTest::testWorksWithGermanLetters";d:0;s:30:"IsogramTest::testIgnoresSpaces";d:0;s:31:"IsogramTest::testIgnoresSpaces2";d:0;s:41:"IsogramTest::testDuplicateAccentedLetters";d:0;s:22:"RobotTest::testHasName";d:0;s:25:"RobotTest::testNameSticks";d:0;s:48:"RobotTest::testDifferentRobotsHaveDifferentNames";d:0;s:24:"RobotTest::testresetName";d:0;s:32:"RobotTest::testNameArentRecycled";d:0.261;s:39:"RobotTest::testNameUniquenessManyRobots";d:0.751;s:31:"SquaresTest::testSquareOfSumTo5";d:0;s:32:"SquaresTest::testSumOfSquaresTo5";d:0;s:35:"SquaresTest::testDifferenceOfSumTo5";d:0;s:32:"SquaresTest::testSquareOfSumTo10";d:0;s:33:"SquaresTest::testSumOfSquaresTo10";d:0;s:36:"SquaresTest::testDifferenceOfSumTo10";d:0;s:33:"SquaresTest::testSquareOfSumTo100";d:0;s:34:"SquaresTest::testSumOfSquaresTo100";d:0;s:37:"SquaresTest::testDifferenceOfSumTo100";d:0;s:31:"GradeSchoolTest::testAddStudent";d:0;s:43:"GradeSchoolTest::testAddStudentsInSameGrade";d:0;s:48:"GradeSchoolTest::testAddStudentInDifferentGrades";d:0;s:31:"GradeSchoolTest::testEmptyGrade";d:0;s:31:"GradeSchoolTest::testSortSchool";d:0;s:30:"RobotSimulatorTest::testCreate";d:0;s:33:"RobotSimulatorTest::testTurnRight";d:0;s:32:"RobotSimulatorTest::testTurnLeft";d:0;s:31:"RobotSimulatorTest::testAdvance";d:0;s:36:"RobotSimulatorTest::testInstructions";d:0;s:45:"RobotSimulatorTest::testMalformedInstructions";d:0;s:44:"RobotSimulatorTest::testInstructionsChaining";d:0;s:44:"RunLengthEncodingTest::testEncodeEmptyString";d:0;s:53:"RunLengthEncodingTest::testEncodeSingleCharactersOnly";d:0;s:44:"RunLengthEncodingTest::testDecodeEmptyString";d:0;s:53:"RunLengthEncodingTest::testDecodeSingleCharactersOnly";d:0;s:39:"RunLengthEncodingTest::testEncodeSimple";d:0;s:39:"RunLengthEncodingTest::testDecodeSimple";d:0;s:49:"RunLengthEncodingTest::testEncodeWithSingleValues";d:0;s:49:"RunLengthEncodingTest::testDecodeWithSingleValues";d:0;s:64:"RunLengthEncodingTest::testDecodeMultipleWhitespaceMixedInString";d:0;s:50:"RunLengthEncodingTest::testEncodeDecodeCombination";d:0;s:61:"SeriesTest::testCanFindTheLargestProductOf2WithNumbersInOrder";d:0;s:43:"SeriesTest::testCanFindTheLargestProductOf2";d:0;s:56:"SeriesTest::testFindsTheLargestProductIfSpanEqualsLength";d:0;s:61:"SeriesTest::testCanFindTheLargestProductOf3WithNumbersInOrder";d:0;s:43:"SeriesTest::testCanFindTheLargestProductOf3";d:0;s:61:"SeriesTest::testCanFindTheLargestProductOf5WithNumbersInOrder";d:0;s:51:"SeriesTest::testCanGetTheLargestProductOfABigNumber";d:0;s:63:"SeriesTest::testCanGetTheLargestProductOfABigNumberProjectEuler";d:0.001;s:49:"SeriesTest::testReportsZeroIfTheOnlyDigitsAreZero";d:0;s:48:"SeriesTest::testReportsZeroIfAllSpansIncludeZero";d:0;s:49:"SeriesTest::testRejectsSpanLongerThanStringLength";d:0;s:58:"SeriesTest::testReports1ForEmptyStringAndEmptyProduct0Span";d:0;s:61:"SeriesTest::testReports1ForNonemptyStringAndEmptyProduct0Span";d:0;s:48:"SeriesTest::testRejectsEmptyStringAndNonzeroSpan";d:0;s:47:"SeriesTest::testRejectsInvalidCharacterInDigits";d:0;s:35:"SeriesTest::testRejectsNegativeSpan";d:0;s:33:"MinesweeperTest::testAnEmptyBoard";d:0;s:60:"MinesweeperTest::testAnIncompleteSideBorderThrowsAnException";d:0;s:59:"MinesweeperTest::testAnIncompleteTopBorderThrowsAnException";d:0;s:52:"MinesweeperTest::testAMissingCornerThrowsAnException";d:0;s:64:"MinesweeperTest::testABoardWithLessThan2SquaresThrowsAnException";d:0;s:37:"MinesweeperTest::testRowsOfSameLength";d:0;s:40:"MinesweeperTest::testCanOnlyContainMines";d:0;s:43:"MinesweeperTest::testBoardWithOneMineToLeft";d:0;s:44:"MinesweeperTest::testBoardWithOneMineToRight";d:0;s:48:"MinesweeperTest::testBoardWithAMineToTopAndRight";d:0;s:61:"MinesweeperTest::testBoardWithAMineToBottomAndLeftAndDiagonal";d:0;s:38:"MinesweeperTest::testAComplicatedBoard";d:0;s:32:"ChangeTest::testSingleCoinChange";d:0;s:22:"ChangeTest::testChange";d:0;s:42:"ChangeTest::testChangeWithLilliputianCoins";d:0;s:43:"ChangeTest::testChangeWithLowerElboniaCoins";d:0;s:36:"ChangeTest::testWithLargeTargetValue";d:0;s:55:"ChangeTest::testPossibleChangeWithoutUnitCoinsAvailable";d:0;s:62:"ChangeTest::testAnotherPossibleChangeWithoutUnitCoinsAvailable";d:0;s:30:"ChangeTest::testNoCoinsForZero";d:0;s:50:"ChangeTest::testForChangeSmallerThanAvailableCoins";d:0;s:52:"ChangeTest::testErrorIfNoCombinationCanAddUpToTarget";d:0.001;s:39:"ChangeTest::testChangeValueLessThanZero";d:0;s:36:"PhoneNumberTest::testCleansTheNumber";d:0;s:44:"PhoneNumberTest::testCleansTheNumberWithDots";d:0;s:54:"PhoneNumberTest::testCleansTheNumberWithMultipleSpaces";d:0;s:39:"PhoneNumberTest::testInvalidWhen9Digits";d:0;s:58:"PhoneNumberTest::testInvalidWhen11DigitsDoesNotStartWithA1";d:0;s:54:"PhoneNumberTest::testValidWhen11DigitsAndStartingWith1";d:0;s:73:"PhoneNumberTest::testValidWhen11DigitsAndStartingWith1EvenWithPunctuation";d:0;s:48:"PhoneNumberTest::testInvalidWhenMoreThan11Digits";d:0;s:39:"PhoneNumberTest::testInvalidWithLetters";d:0;s:43:"PhoneNumberTest::testInvalidWithPunctuation";d:0;s:49:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith0";d:0;s:49:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith1";d:0;s:53:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith0";d:0;s:53:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith1";d:0;s:69:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith0OnValid11DigitNumber";d:0;s:69:"PhoneNumberTest::testInvalidIfAreaCodeStartsWith1OnValid11DigitNumber";d:0;s:73:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith0OnValid11DigitNumber";d:0;s:73:"PhoneNumberTest::testInvalidIfExchangeCodeStartsWith1OnValid11DigitNumber";d:0;s:25:"WordProblemTest::testAdd1";d:0;s:25:"WordProblemTest::testAdd2";d:0;s:39:"WordProblemTest::testAddNegativeNumbers";d:0;s:34:"WordProblemTest::testAddMoreDigits";d:0;s:29:"WordProblemTest::testSubtract";d:0;s:29:"WordProblemTest::testMultiply";d:0;s:27:"WordProblemTest::testDivide";d:0;s:29:"WordProblemTest::testAddTwice";d:0;s:36:"WordProblemTest::testAddThenSubtract";d:0;s:34:"WordProblemTest::testSubtractTwice";d:0;s:36:"WordProblemTest::testSubtractThenAdd";d:0;s:34:"WordProblemTest::testMultiplyTwice";d:0;s:36:"WordProblemTest::testAddThenMultiply";d:0;s:32:"WordProblemTest::testDivideTwice";d:0;s:32:"WordProblemTest::testTooAdvanced";d:0.001;s:31:"WordProblemTest::testIrrelevant";d:0;s:24:"ClockTest::testOnTheHour";d:0.002;s:26:"ClockTest::testPastTheHour";d:0;s:32:"ClockTest::testAddingAFewMinutes";d:0;s:32:"ClockTest::testAddingZeroMinutes";d:0;s:31:"ClockTest::testAddingOverAnHour";d:0;s:46:"ClockTest::testAddingMoreThanTwoHoursWithCarry";d:0;s:36:"ClockTest::testAddingMoreThanTwoDays";d:0;s:35:"ClockTest::testWrapAroundAtMidnight";d:0;s:30:"ClockTest::testSubtractMinutes";d:0;s:39:"ClockTest::testSubtractMoreThanTwoHours";d:0;s:54:"ClockTest::testSubtractMoreThanTwoHoursWithNegativeAdd";d:0;s:38:"ClockTest::testSubtractMoreThanTwoDays";d:0;s:34:"ClockTest::testWrapAroundBackwards";d:0;s:28:"ClockTest::testWrapAroundDay";d:0;s:37:"ClockTest::testWrapAroundDayBackwards";d:0;s:31:"ClockTest::testEquivalentClocks";d:0;s:33:"ClockTest::testInequivalentClocks";d:0;s:60:"ClockTest::testEquivalentClocksWithHourOverflowBySeveralDays";d:0;s:47:"ClockTest::testEquivalentClocksWithNegativeHour";d:0;s:56:"ClockTest::testEquivalentClocksWithNegativeHourThatWraps";d:0;s:62:"ClockTest::testEquivalentClocksWithMinuteOverflowBySeveralDays";d:0;s:57:"ClockTest::testEquivalentClocksWithNegativeMinuteOverflow";d:0;s:58:"ClockTest::testEquivalentClocksWithNegativeHoursAndMinutes";d:0;s:28:"ClockTest::testHoursRollOver";d:0;s:30:"ClockTest::testMinutesRollOver";d:0;s:38:"ClockTest::testHoursAndMinutesRollOver";d:0;s:36:"ClockTest::testNegativeHoursRollOver";d:0;s:38:"ClockTest::testNegativeMinutesRollOver";d:0;s:46:"ClockTest::testNegativeHoursAndMinutesRollOver";d:0;s:52:"TriangleTest::testEquilateralTrianglesHaveEqualSides";d:0;s:58:"TriangleTest::testLargerEquilateralTrianglesHaveEqualSides";d:0;s:59:"TriangleTest::testIsoscelesTriangleWhenLastTwoSidesAreEqual";d:0;s:64:"TriangleTest::testIsoscelesTriangleWhenFirstAndLastSidesAreEqual";d:0;s:60:"TriangleTest::testIsoscelesTriangleWhenFirstTwoSidesAreEqual";d:0;s:71:"TriangleTest::testIsoscelesTrianglesWithUnequalSideLargerThanEqualSides";d:0;s:50:"TriangleTest::testScaleneTrianglesHaveNoEqualSides";d:0;s:60:"TriangleTest::test2aEqualsBPlusCLooksLikeEquilateralButIsNot";d:0;s:63:"TriangleTest::testScaleneTrianglesHaveNoEqualSidesAtLargerScale";d:0;s:67:"TriangleTest::testScaleneTrianglesHaveNoEqualSidesInDescendingOrder";d:0;s:44:"TriangleTest::testVerySmallTrianglesAreLegal";d:0;s:47:"TriangleTest::testTrianglesWithNoSizeAreIllegal";d:0;s:64:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal";d:0;s:65:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal2";d:0;s:65:"TriangleTest::testTrianglesViolatingTriangleInequalityAreIllegal3";d:0;s:41:"NucleotideCountTest::testEmptyDNASequence";d:0;s:46:"NucleotideCountTest::testRepetitiveDNASequence";d:0;s:36:"NucleotideCountTest::testDNASequence";d:0;s:35:"AccumulateTest::testAccumulateEmpty";d:0;s:37:"AccumulateTest::testAccumulateSquares";d:0;s:40:"AccumulateTest::testAccumulateUpperCases";d:0;s:45:"AccumulateTest::testAccumulateReversedStrings";d:0;s:39:"AccumulateTest::testAccumulateConstants";d:0;s:46:"AccumulateTest::testAccumulateWithinAccumulate";d:0;s:50:"AccumulateTest::testAccumulateUsingBuiltInFunction";d:0;s:47:"AccumulateTest::testAccumulateUsingStaticMethod";d:0;s:41:"AccumulateTest::testAccumulateUsingInvoke";d:0;s:57:"AccumulateTest::testAccumulateUsingObjectAndArrayNotation";d:0;s:31:"OcrNumbersTest::testRecognizes0";d:0;s:31:"OcrNumbersTest::testRecognizes1";d:0;s:30:"OcrNumbersTest::testUnreadable";d:0;s:43:"OcrNumbersTest::testErrorWrongNumberOfLines";d:0;s:45:"OcrNumbersTest::testErrorWrongNumberOfColumns";d:0;s:39:"OcrNumbersTest::testRecognizes110101100";d:0;s:27:"OcrNumbersTest::testGarbled";d:0;s:31:"OcrNumbersTest::testRecognizes2";d:0;s:31:"OcrNumbersTest::testRecognizes3";d:0;s:31:"OcrNumbersTest::testRecognizes4";d:0;s:31:"OcrNumbersTest::testRecognizes5";d:0;s:31:"OcrNumbersTest::testRecognizes6";d:0;s:31:"OcrNumbersTest::testRecognizes7";d:0;s:31:"OcrNumbersTest::testRecognizes8";d:0;s:31:"OcrNumbersTest::testRecognizes9";d:0;s:52:"OcrNumbersTest::testRecognizesStringOfDecimalNumbers";d:0;s:35:"OcrNumbersTest::testLinesWithCommas";d:0;}}}